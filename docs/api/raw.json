{"majorversion": 3, "filemap": {"glob.js": {"classlist": [], "name": "glob.js", "module": "MojitoServer"}, "deploy.server.js": {"classlist": ["Deploy.server"], "name": "deploy.server.js", "module": "ActionContextAddon"}, "action-context.common.js": {"classlist": ["Y.mojito.ActionContext"], "name": "action-context.common.js", "module": "MojitoClient"}, "output-handler.client.js": {"classlist": [], "name": "output-handler.client.js", "module": "MojitoClient"}, "performance_monitor.client-optional.js": {"classlist": [], "name": "performance_monitor.client-optional.js", "module": "ActionContext"}, "config.common.js": {"classlist": ["Config.common"], "name": "config.common.js", "module": "MojitoServer"}, "intl.common.js": {"classlist": ["Intl.common"], "name": "intl.common.js", "module": "MojitoServer"}, "mojito.common.js": {"classlist": [], "name": "mojito.common.js", "module": "CommonLibs"}, "loader.common.js": {"classlist": [], "name": "loader.common.js", "module": "MojitoClient"}, "carrier.server.js": {"classlist": ["Carrier.common"], "name": "carrier.server.js", "module": "ActionContextAddon"}, "device.server.js": {"classlist": ["Device.common"], "name": "device.server.js", "module": "ActionContextAddon"}, "response_processor.client-optional.js": {"classlist": [], "name": "response_processor.client-optional.js", "module": "ActionContext"}, "request_formatter.client-optional.js": {"classlist": [], "name": "request_formatter.client-optional.js", "module": "ActionContext"}, "mu.client.js": {"classlist": ["MuAdapterClient"], "name": "mu.client.js", "module": "MojitoServer"}, 
"view-renderer.common.js": {"classlist": [], "name": "view-renderer.common.js", "module": "MojitoClient"}, "mojito-test.common.js": {"classlist": [], "name": "mojito-test.common.js", "module": "MojitoClient"}, "controller.common.js": {"classlist": [], "name": "controller.common.js", "module": "MojitoServer"}, "transport_utils.client-optional.js": {"classlist": [], "name": "transport_utils.client-optional.js", "module": "ActionContext"}, "output-handler.server.js": {"classlist": ["OutputHandler"], "name": "output-handler.server.js", "module": "MojitoServer"}, "mojit-proxy.client.js": {"classlist": ["Y.mojito.MojitProxy"], "name": "mojit-proxy.client.js", "module": "MojitoClient"}, 
"store-provider.server.js": {"classlist": [], "name": "store-provider.server.js", "module": "MojitoServer"}, "store.client.js": {"classlist": [], "name": "store.client.js", "module": "CommonLibs"}, "assets.common.js": {"classlist": ["Assets.common"], "name": "assets.common.js", "module": "ActionContextAddon"}, "rest.common.js": {"classlist": ["Y.mojito.lib.REST"], "name": "rest.common.js", "module": "ActionContextAddon"}, "dispatch.common.js": {"classlist": ["Y.mojito.MojitoDispatcher"], "name": "dispatch.common.js", "module": "MojitoClient"}, "cookie.server.js": {"classlist": ["Cookie.server"], "name": "cookie.server.js", "module": "MojitoServer"}, "meta.common.js": {"classlist": ["Meta.common"], "name": "meta.common.js", "module": "ActionContextAddon"}, "params.common.js": {"classlist": ["Params.common"], "name": "params.common.js", "module": "MojitoServer"}, 
"tunnel.client-optional.js": {"classlist": [], "name": "tunnel.client-optional.js", "module": "CommonLibs"}, "output-adapter.common.js": {"classlist": ["OutputAdapter.common"], "name": "output-adapter.common.js", "module": "ActionContextAddon"}, "request_handler.client-optional.js": {"classlist": [], "name": "request_handler.client-optional.js", "module": "ActionContext"}, "util.common.js": {"classlist": [], "name": "util.common.js", "module": "MojitoClient"}, "response_formatter.client-optional.js": {"classlist": [], "name": "response_formatter.client-optional.js", "module": "ActionContext"}, "transport.client-optional.js": {"classlist": [], "name": "transport.client-optional.js", "module": "ActionContext"}, "controller.server.js": {"classlist": [], "name": "controller.server.js", "module": "MojitoServer"}, "requestor.client-optional.js": {"classlist": [], "name": "requestor.client-optional.js", "module": "ActionContext"}, "logger.common.js": {"classlist": [], "name": "logger.common.js", "module": "MojitoClient"}, "controller-context.common.js": {"classlist": [], "name": "controller-context.common.js", "module": "MojitoClient"}, "partial.common.js": {"classlist": ["Partial.common"], "name": "partial.common.js", "module": "MojitoServer"}, "cookie.client.js": {"classlist": ["Cookie.client"], "name": "cookie.client.js", "module": "MojitoServer"}, "resource-store-adapter.common.js": {"classlist": ["Y.mojito.lib.MojitoDispatcher"], "name": "resource-store-adapter.common.js", "module": "CommonLibs"}, "perf.client.js": {"classlist": [], "name": "perf.client.js", "module": "CommonLibs"}, "server-log.js": {"classlist": [], "name": "server-log.js", "module": "MojitoServer"}, "dali_bean.client-optional.js": {"classlist": [], "name": "dali_bean.client-optional.js", "module": "ActionContext"}, "route-maker.common.js": {"classlist": [], "name": "route-maker.common.js", "module": "MojitoClient"}, "i13n.common.js": {"classlist": ["I13n.server"], "name": "i13n.common.js", "module": "ActionContextAddon"}, "composite.common.js": {"classlist": ["Composite.common"], "name": "composite.common.js", "module": "MojitoServer"}, "analytics.common.js": {"classlist": ["Analytics.common"], "name": "analytics.common.js", "module": "MojitoServer"}, "io_facade.client-optional.js": {"classlist": [], "name": "io_facade.client-optional.js", "module": "ActionContext"}, "http.server.js": {"classlist": ["Http.server"], "name": "http.server.js", "module": "MojitoServer"}, "mu.server.js": {"classlist": ["MuAdapterServer"], "name": "mu.server.js", "module": "MojitoServer"}, "perf.server.js": {"classlist": [], "name": "perf.server.js", "module": "MojitoClient"}, "url.common.js": {"classlist": ["Url.common"], "name": "url.common.js", "module": "MojitoServer"}, "registry.client-optional.js": {"classlist": [], "name": "registry.client-optional.js", "module": "ActionContext"}, "mojito-client.client.js": {"classlist": ["Y.mojito.Client"], "name": "mojito-client.client.js", "module": "CommonLibs"}, "store.server.js": {"classlist": ["ServerStore"], "name": "store.server.js", "module": "MojitoServer"}, "index.js": {"classlist": [], "name": "index.js", "module": "MojitoServer"}}, "modules": {"MojitoServer": {"description": "The Mojito Server bootstrap", "submodules": [], "classlist": ["OutputHandler", "ServerStore", "MojitoServer", "MuAdapterServer", "MuAdapterClient", "Http.server", "Intl.common", "Partial.common", "Params.common", "Composite.common", "Url.common", "Cookie.server", "Config.common", "Cookie.client"], "filelist": ["server-log.js", "glob.js", "output-handler.server.js", "store.server.js", "index.js", "controller.server.js", "controller.common.js", "index.js", "controller.server.js", "store-provider.server.js", "mu.server.js", "mu.client.js", "http.server.js", "intl.common.js", "partial.common.js", "params.common.js", "composite.common.js", "url.common.js", "cookie.server.js", "config.common.js", "cookie.client.js", "analytics.common.js"], "subdata": {}, "name": "MojitoServer"}, "ActionContext": {"description": "The Action Context is a key part of the Mojito framework. The <em>ac</em>, for short, gives you access\nto the frameworks features from within a controller function. The ac is an abstraction that\nallows you to execute mojit actions within either a server or client context.", "submodules": [], "classlist": ["Y.mojito.ActionContext"], "filelist": ["transport.client-optional.js", "io_facade.client-optional.js", "response_processor.client-optional.js", "request_handler.client-optional.js", "requestor.client-optional.js", "transport_utils.client-optional.js", "response_formatter.client-optional.js", "request_formatter.client-optional.js", "dali_bean.client-optional.js", "registry.client-optional.js", "performance_monitor.client-optional.js"], "subdata": {}, "name": "ActionContext"}, "MojitoClient": {"description": "Client side Mojito runtime", "submodules": [], "classlist": ["Y.mojito.Client", "Y.mojito.MojitoDispatcher", "Y.mojito.MojitProxy"], "filelist": ["route-maker.common.js", "perf.server.js", "dispatch.common.js", "controller-context.common.js", "util.common.js", "loader.common.js", "output-handler.client.js", "logger.common.js", "mojit-proxy.client.js", "view-renderer.common.js", "mojito-test.common.js", "action-context.common.js"], "subdata": {}, "name": "MojitoClient"}, "ActionContextAddon": {"description": "The <strong>Action Context</strong> uses a mechanism called <strong><em>Addons</em></strong>\nto provide functionality that lives both\non the server and/or client. Each Addon provides additional functions through a namespace\nthat is attached directly to the ac argument available in every controller function.", "submodules": [], "classlist": ["Analytics.common", "Meta.common", "Assets.common", "Deploy.server", "OutputAdapter.common", "I13n.server", "Device.common",  "Carrier.common",  "filelist": ["meta.common.js", "assets.common.js", "deploy.server.js", "output-adapter.common.js",  "i13n.common.js", "device.server.js",  "carrier.server.js",  "rest.common.js"], "subdata": {}, "name": "ActionContextAddon"}, "CommonLibs": {"description": "Common Library", "submodules": [], "classlist": ["Y.mojito.lib.REST", "Y.mojito.lib.MojitoDispatcher"], "filelist": ["mojito.common.js", "store.client.js", "perf.client.js", "resource-store-adapter.common.js", "tunnel.client-optional.js", "mojito-client.client.js"], "subdata": {}, "name": "CommonLibs"}}, "classmap": {"Partial.common": {"name": "Partial.common", "namespace": "", "module": "MojitoServer", "methods": {"invoke": {"return": {"type": "void", "description": ""}, "params": [{"type": "string", "name": "action", "description": " name of the action to invoke"}, {"type": "object", "name": "options", "description": " see above"}, {"type": "function", "name": "cb", "description": " callback function to be called on completion"}], "description": "This method calls the current mojit's controller with the \"action\"\ngiven and returns its output via the callback.\nThe <em>options</em> parameter is optional and may contain:\n<dl>\n<dt>params</dt><dd>&lt;object&gt; must be broken out explicitly:\n<dl>\n<dt>route</dt><dd>&lt;object&gt; Map of key/value pairs.</dd>\n<dt>url</dt><dd>&lt;object&gt; Map of key/value pairs.</dd>\n<dt>body</dt><dd>&lt;object&gt; Map of key/value pairs.</dd>\n<dt>file</dt><dd>&lt;object&gt; Map of key/value pairs.</dd>\n</dl></dd>\n</dl>", "guessedname": "invoke", "guessedtype": "function"}, "render": {"return": {"type": "void", "description": ""}, "params": [{"type": "object", "name": "data", "description": ""}, {"type": "string", "name": "view", "description": ""}, {"type": "function", "name": "cb", "description": " callback signature is function(error, result)"}], "description": "This method renders the \"data\" provided into the \"view\" specified.\nThe \"view\" must be the name of one of the files in the current\nMojits \"views\" folder. Returns via the callback.", "guessedname": "render", "guessedtype": "function"}}, "file": "partial.common.js", "shortname": "Partial.common", "description": "<strong>Access point:</strong> <em>ac.partial.*</em>\nProvides methods for working with \"actions\" and \"views\" on the current Mojits."}, "Meta.common": {"name": "Meta.common", "namespace": "", "module": "ActionContextAddon", "methods": {"retrieve": {"params": [{"type": "function", "name": "cb", "description": " callback will be called with the stored merged object"}, {"type": "object", "name": "[optional]", "description": " scope scope of the callback"}], "description": "To retrieve stashed data that has been stored by child mojits, call\nthis function and provide a function, which will be called once the children\nhave been dispatched and all their meta data has been merged.", "guessedname": "retrieve", "guessedtype": "function"}, "store": {"params": [{"type": "string", "name": "key", "description": ""}, {"type": "object", "name": "val", "description": ""}], "description": "Stores a keyed value within the meta object of the current mojit\nexecution. You can call this as many times as you like, but\nif you use the same key, you'll override previous data. Call this within\nchild mojits when you have some data you want to make available for\nsome reason to any parents up your hierarchy.", "guessedname": "store", "guessedtype": "function"}}, "file": "meta.common.js", "shortname": "Meta.common", "description": "<strong>Access point:</strong> <em>ac.meta.*</em>\nAllows the usage of the \"meta\" object as a storage device, which can pass data from\nchild mojits up towards parents."}, "OutputHandler": {"name": "OutputHandler", "constructors": [{"params": [{"type": "Object", "name": "req", "description": ""}, {"type": "Object", "name": "res", "description": ""}], "description": "This is an object used as the single pathway for data to leave a mojit\naction execution. It is used as a component of the ActionContext object,\nwhich uses it to call <em>done</em> and <em>flush</em> in order to complete.\nThere are two versions of this object, one for the client, and one for the\nserver. This is the server version, which is more complex than the client\nversion."}], "namespace": "", "private": "", "guessedname": "OutputHandler", "module": "MojitoServer", "file": "output-handler.server.js", "guessedtype": "function", "shortname": "OutputHandler", "description": "This is an object used as the single pathway for data to leave a mojit\naction execution. It is used as a component of the ActionContext object,\nwhich uses it to call <em>done</em> and <em>flush</em> in order to complete.\nThere are two versions of this object, one for the client, and one for the\nserver. This is the server version, which is more complex than the client\nversion."}, "I13n.server": {"name": "I13n.server", "namespace": "", "module": "ActionContextAddon", "methods": {"trackLink": {"return": {"type": "string", "description": "url with the hash appended to it."}, "description": "Tracks the link view and gemerates the URL\nwith the hash token appended to it.", "guessedname": "trackLink", "guessedtype": "function", "params": [{"type": "string", "name": "url", "description": "  - The link to be instrumented."}, {"type": "object", "name": "link_params", "description": "  - parameteres"}, {"type": "", "name": "local_groups", "description": " - Optional"}, {"type": "", "name": "ult_args", "description": " - Optional"}]}, "trackPageParams": {"params": [{"type": "string", "name": "key", "description": "  - The page parameter name"}, {"type": "string", "name": "vlaue", "description": "  -The page parameter value"}], "description": "Tracks a pair of page parameters as (key, value) for this request.", "guessedname": "trackPageParams", "guessedtype": "function"}, "trackForm": {"return": {"type": "string", "description": "form action url with the hash appended to it."}, "description": ", ,  [, ult_args [, return_code]]", "guessedname": "trackForm", "guessedtype": "function", "params": [{"type": "boolean", "name": "is_post_method", "description": "  - true, if the method is POST"}, {"type": "string", "name": "action_url", "description": "  - the form action link to be instrumented."}, {"type": "object", "name": "link_params", "description": " -  Tracking parameters."}, {"type": "", "name": "ult_args", "description": " - Optional"}]}, "make": {"params": [{"type": "string", "name": "id", "description": "  it to a mojit defined at the root level of the Mojito application configuration"}, {"type": "string", "name": "action", "description": ""}, {"type": "object", "name": "routeParams", "description": "  used to lookup the route in the routing table"}, {"type": "string", "name": "verb", "description": "  GET, POST, PUT, DELETE (case insensitive)"}, {"type": "object", "name": "urlParams", "description": "  added to the looked up route as query params"}, {"type": "object", "name": "i13nParams", "description": "  parameters to be used for link tracking."}], "description": "Provides facility to create an URL to other\nmojits with a link tracking instrumentation.", "guessedname": "make", "guessedtype": "function"}, "getSpaceid": {"return": {"type": "", "description": "spaceid previously set through stampPageView() or configuration."}, "description": "Retrurn spaceid used for this request.", "guessedname": "getSpaceid", "guessedtype": "function"}, "trackUserLink": {"return": {"type": "string", "description": "url with the hash appended to it."}, "description": "Tracks the link view for the links taken from the user generated content\nand hence need to be signed by B-cookie to prevent the security problems.", "guessedname": "trackUserLink", "guessedtype": "function", "params": [{"type": "string", "name": "url", "description": "  - The link to be instrumented."}, {"type": "object", "name": "link_params", "description": "  - parameteres"}, {"type": "", "name": "local_groups", "description": " - Optional"}, {"type": "", "name": "ult_args", "description": " - Optional"}]}, "stampPageView": {"params": [{"type": "number", "name": "spaceid", "description": "   The spaceid to be used."}], "description": "Stamps the page view event.", "guessedname": "stampPageView", "guessedtype": "function"}, "trackClickOnly": {"return": {"type": "string", "description": "url with the hash appended to it."}, "description": "Instrument links for tracking of the link clicks by gemerating the URL\nwith the hash token appended to it.", "guessedname": "trackClickOnly", "guessedtype": "function", "params": [{"type": "string", "name": "url", "description": "  - The link to be instrumented."}, {"type": "object", "name": "link_params", "description": "  - parameteres"}, {"type": "", "name": "ult_args", "description": " - Optional"}]}}, "file": "i13n.common.js", "shortname": "I13n.server", "description": "<strong>Access point:</strong> <em>ac.i13n.*</em>\nInstrumentation addon for link tracking and page views."}, "MojitoServer": {"name": "MojitoServer", "constructors": [{"description": "The Mojito Server bootstrap"}], "namespace": "", "module": "MojitoServer", "guessedname": "MOJITO_INIT", "methods": {"createServer": {"return": {"type": "object", "description": "app  Express application"}, "params": [{"type": "object", "name": "options", "description": "  Options for starting the app"}], "description": "Creates an Express application with the Mojito framework already added.", "guessedname": "createServer", "guessedtype": "function"}, "addMojitoToExpressApp": {"params": [{"type": "object", "name": "app", "description": "  Express application"}, {"type": "object", "name": "options", "description": "  The directory to start the application in"}], "description": "Adds the Mojito framework to the Express application.\nYou only need to call one of addMojitoToExpressApp() or createServer().\nIf you want to create your own Express app do that then use\naddMojitoToExpressApp().  Otherwise Mojito can create an app for you\nif you use createServer().", "guessedname": "addMojitoToExpressApp", "guessedtype": "function"}, "setStore": {"guessedname": "setStore", "params": [{"type": "ResourceStore", "name": "rs", "description": ""}], "description": "Declaration of store requirement.", "private": "", "guessedtype": "function"}}, "file": "index.js", "guessedtype": "property", "shortname": "MojitoServer", "description": "The Mojito Server bootstrap"}, "Url.common": {"name": "Url.common", "namespace": "", "module": "MojitoServer", "methods": {"make": {"params": [{"type": "string", "name": "id", "description": "  it to a mojit defined at the root level of the Mojito application configuration"}, {"type": "string", "name": "action", "description": ""}, {"type": "object", "name": "routeParams", "description": "  used to lookup the route in the routing table"}, {"type": "string", "name": "verb", "description": "  GET, POST, PUT, DELETE (case insensitive)"}, {"type": "object", "name": "urlParams", "description": "  added to the looked up route as query params"}], "description": "Generates a URL from the given parameters", "guessedname": "make", "guessedtype": "function"}, "find": {"params": [{"type": "string", "name": "url", "description": "  the URL to find a route for"}, {"type": "string", "name": "verb", "description": "  the HTTP method"}], "description": "Finds the first matching route from the given URL", "guessedname": "find", "guessedtype": "function"}}, "file": "url.common.js", "shortname": "Url.common", "description": "<strong>Access point:</strong> <em>ac.url.*</em>\nGenerates URL's based on the applictions routing configuration"}, 

"Y.mojito.MojitProxy": {"name": "Y.mojito.MojitProxy", "namespace": "Y.mojito", "module": "MojitoClient", "methods": {"render": {"params": [{"type": "object", "name": "data", "description": ""}, {"type": "string", "name": "view", "description": ""}, {"type": "function(err,str)", "name": "cb", "description": ""}], "description": "This method renders the \"data\" provided into the \"View\" specified.\nThe \"view\" must be the name of one of the files in the current\nMojits \"views\" folder. Returns via the callback.", "guessedname": "render", "guessedtype": "function"}, "invoke": {"params": [{"type": "string", "name": "action", "description": " name of the action to invoke"}, {"type": "Object", "name": "options", "description": " see above"}, {"type": "function", "name": "cb", "description": " function to be called on completion"}], "description": "Used by the mojit binders to invoke actions on themselves within Mojito.\nThe <em>options</em> parameter is optional and may contain:\n<dl>\n<dt>params</dt><dd>&lt;object&gt; must be broken out explicitly:\n<dl>\n<dt>route</dt><dd>&lt;object&gt; Map of key/value pairs.</dd>\n<dt>url</dt><dd>&lt;object&gt; Map of key/value pairs.</dd>\n<dt>body</dt><dd>&lt;object&gt; Map of key/value pairs.</dd>\n<dt>file</dt><dd>&lt;object&gt; Map of key/value pairs.</dd>\n</dl></dd>\n<dt>rpc</dt><dd>&lt;boolean&gt; Means that we are immediately\nsending the request to the server to answer the invocation.</dd>\n</dl>", "guessedname": "invoke", "guessedtype": "function"}, "destroyChild": {"params": [{"type": "", "name": "id", "description": " <string> *Either* the slot key of the child, or the DOM view id of the child"}], "description": "Clears out a child's view, calling the appropriate life cycle functions, then destroy's its binder and\ndereferences it. Will also dereference the child from this mojit's children.", "guessedname": "destroyChild", "guessedtype": "function"}, "unlisten": {"params": [{"type": "String", "name": "[optional]", "description": " name event name"}], "description": "The opposite of the \"listen\" function. Deletes all callback functions from the\nlistener queue associated with this binder and event type. If event name is not\nspecified, all callbacks associated with this binder are deleted.", "guessedname": "unlisten", "guessedtype": "function"}, "destroySelf": {"params": [{"type": "", "name": "retainNode", "description": " <boolean> if true, the binder's node will remain in the dom"}], "description": "Allows a binder to destroy itself and be removed from Mojito client runtime entirely.", "guessedname": "destroySelf", "guessedtype": "function"}, "broadcast": {"params": [{"type": "String", "name": "name", "description": " event name"}, {"type": "Object", "name": "payload", "description": " the payload for the event"}], "description": "Used by mojit binders to broadcast a message between mojits.", "guessedname": "broadcast", "guessedtype": "function"}, "refreshView": {"params": [{"type": "", "name": "opts", "description": " [optional] <object> same as the options for invoke()"}, {"type": "", "name": "cb", "description": " [optional] called after replacement and onRefreshView have been called, sends data/meta"}], "description": "Refreshes the current DOM view for this binder without recreating the binder instance. Will call\nthe binder's onRefreshView() function when complete with the new Y.Node and HTMLElement objects.", "guessedname": "refreshView", "guessedtype": "function"}, "getChildren": {"return": {"type": "", "description": ""}, "description": "Helper function to gather up details about a mojit's children from the Mojito Client", "guessedname": "getChildren", "guessedtype": "function"}, "getFromUrl": {"return": {"type": "string|object", "description": "param value, or all params if no key specified"}, "params": [{"type": "string", "name": "key", "description": " The name of the parameter required"}], "description": "Gets URL parameters", "guessedname": "getFromUrl", "guessedtype": "function"}, "listen": {"params": [{"type": "String", "name": "name", "description": " event name"}, {"type": "Function", "name": "callback", "description": " called when an event is broadcastd with the event data"}], "description": "Allows mojit binders to register to listen to other mojit events", "guessedname": "listen", "guessedtype": "function"}}, "file": "mojit-proxy.client.js", "shortname": "MojitProxy", "properties": {"config": {"type": "{object}", "description": "The mojit configuration for this binder", "guessedname": "config", "guessedtype": "property"}, "type": {"type": "{string}", "description": "The mojit type", "guessedname": "type", "guessedtype": "property"}, "children": {"type": "{object}", "description": "An object that contains information about the children used to generate this DOM node associted with this\nbinder. This should identify what mojits may exist as children within this binder's domain. You can use it\nto broadcast messages directly to certain children as explained in the topical documentation.", "guessedname": "children", "guessedtype": "property"}, "context": {"type": "{object}", "description": "The context used to generate this page", "guessedname": "context", "guessedtype": "property"}}, "description": "The object that is given to each mojit binder to be used to interact with other mojits\nand the mojito framework."}, "Y.mojito.MojitoDispatcher": {"name": "Y.mojito.MojitoDispatcher", "constructors": [{"params": [{"type": "ServerStore", "name": "resourceStore", "description": "  the store to use"}], "description": "This object is responsible for running mojits."}], "namespace": "Y.mojito", "module": "MojitoClient", "methods": {"metaMerge": {"guessedname": "metaMerge", "params": [{"type": "", "name": "to", "description": ""}, {"type": "", "name": "from", "description": ""}, {"type": "", "name": "clobber", "description": ""}], "description": "Used to merge meta objects into each other. Special consideration for certain headers values\nlike 'content-type'.", "private": "", "guessedtype": "function"}}, "private": "", "file": "dispatch.common.js", "shortname": "MojitoDispatcher", "description": "This object is responsible for running mojits."}, "Intl.common": {"name": "Intl.common", "namespace": "", "module": "MojitoServer", "methods": {"lang": {"return": {"type": "string", "description": "translated string for label"}, "params": [{"type": "string", "name": "label", "description": ""}], "description": "Returns translated string", "guessedname": "lang", "guessedtype": "function"}, "formatDate": {"return": {"type": "string", "description": "formated data for language"}, "params": [{"type": "Date", "name": "date", "description": ""}], "description": "returns local-specified date", "guessedname": "formatDate", "guessedtype": "function"}}, "file": "intl.common.js", "shortname": "Intl.common", "description": "<strong>Access point:</strong> <em>ac.intl.*</em>\nInternationalization addon"}, "Deploy.server": {"name": "Deploy.server", "namespace": "", "module": "ActionContextAddon", "methods": {"setStore": {"guessedname": "setStore", "params": [{"type": "ResourceStore", "name": "rs", "description": ""}], "description": "Declaration of store requirement.", "private": "", "guessedtype": "function"}, "getScripts": {"return": {"type": "object", "description": ""}, "description": "TODO RIC: [bug 4647806] This can be made faster with a single for loop and caching\nNote: A single SCRIPT tag containing all the JS on the pages is\nslower than many SCRIPT tags (checked on iPad only).", "private": "", "params": [{"type": "bool", "name": "embed", "description": ""}], "guessedname": "getScripts", "guessedtype": "function"}, "constructMojitoClientRuntime": {"params": [{"type": "AssetHandler", "name": "assetHandler", "description": "  asset handler used to add scripts to the DOM under construction"}, {"type": "object", "name": "binderMap", "description": "  information about the binders that will be deployed to the client"}], "description": "Builds up the browser Mojito runtime.", "guessedname": "constructMojitoClientRuntime", "guessedtype": "function"}}, "file": "deploy.server.js", "shortname": "Deploy.server", "description": "<strong>Access point:</strong> <em>ac.deploy.*</em>\nProvides ability to create client runtime deployment HTML"}, 

"Cookie.client": {"name": "Cookie.client", "namespace": "", "module": "MojitoServer", "file": "cookie.client.js", "shortname": "Cookie.client", "description": "<strong>Access point:</strong> <em>ac.cookie.*</em>\nThis client-side cookie add-on allows you to easily use cookies. This API matches the YUI Cookie API exactly.\nhttp://developer.yahoo.com/yui/3/api/Cookie.html"}, "OutputAdapter.common": {"name": "OutputAdapter.common", "namespace": "", "module": "ActionContextAddon", "private": "", "file": "output-adapter.common.js", "shortname": "OutputAdapter.common", "description": "<strong>Access point:</strong> <em>ac.*</em>\nThe main API point for developers in a Controller. This addon provides the core functions\nof the ActionContext: <em>flush</em>, <em>done</em>, and <em>error</em>."}, "Y.mojito.ActionContext": {"submodule": "ActionContext", "name": "Y.mojito.ActionContext", "namespace": "Y.mojito", "module": "ActionContext", "methods": {"execute": {"guessedname": "execute", "params": [{"type": "String", "name": "url", "description": " Url to access"}, {"type": "Object", "name": "data", "description": " The data to send"}, {"type": "String", "name": "method", "description": " GET or POST"}], "description": "Executes an io request", "private": "", "guessedtype": "function"}, "enable": {"static": "", "description": "Enables sending of requests.", "guessedname": "enable", "guessedtype": "function"}, "flush": {"params": [{"type": "object|string", "name": "data", "description": " The data you want return by the request"}, {"type": "object", "name": "meta", "description": " Any meta-data required to service the request"}], "description": "Returns data in the request and allows you to carry on execution."}, "dispatch": {"return": {"type": "", "description": "nothing. results are passed via the adapter"}, "params": [{"type": "map", "name": "command", "description": "  the \"command\" describing how to dispatch the mojit. see above"}, {"type": "object", "name": "adapter", "description": "  the output adapter to pass to the mojit. see above"}], "description": "This dispatch function is called one time per Mojito execution. It creates a\ncontextualized Y instance for all further internal dispatches to use. It also\ncreates the ActionContext for the mojit.\nThe command has three main parts:  the \"instance\", the \"context\", and the \"params\".\n<pre>\ncommand: {\ninstance: ...see below...\ncontext: ...see below...\nparams: ...see below...\n}\n</pre>\nThe \"instance\" is a partial instance with details of the mojit instance.\nSee `ServerStore.expandInstance()` for details of the structure and which fields\nare required.\nThe \"context\" is the request context.  It is built by the \"contextualizer\"\nmiddleware.\nThe \"params\" is a structured set of parameters to pass to the mojit.\n<pre>\nparams: {\nroute: {},\nurl: {},\nbody: {},\nfile: {},\n...\n}\n</pre>\n<pre>\nadapter: {\nflush: function(data, meta){},\ndone: function(data, meta){},\nerror: function(err){}\n}\n</pre>"}, "doRequest": {"return": {"type": "Object", "description": "the transactionObject from io"}, "params": [{"type": "Array", "name": "request", "description": " the request or requests to be sent to the server"}, {"type": "Boolean", "name": "forcepost", "description": " if true the request will be sent as a post, \nregardless of length"}], "description": "finally prepares the request (stringify) and sends it\nto ioFacade to be sent to the server", "private": ""}, "setRequestFormatter": {"params": [{"type": "String", "name": "requestType", "description": " The type of request that the formatter should handle."}, {"type": "Function", "name": "formatter", "description": " The function to call to format the request."}], "description": "Sets the request formatter function for a given request type.", "guessedname": "setRequestFormatter", "guessedtype": "function"}, "processTransactionResponse": {"params": [{"type": "Number", "name": "transactionId", "description": " the IO transaction id"}, {"type": "Object", "name": "ioResponseObj", "description": " the IO response object"}], "description": "Proccess an complete transaction", "private": ""}, "disable": {"params": [{"type": "Boolean", "name": "queue", "description": " (Optional) When set to true, queues all requests while disabled."}], "description": "Disables all Ajax requests for the application.", "guessedname": "disable", "guessedtype": "function"}, "done": {"params": [{"type": "object|string", "name": "data", "description": " The data you want return by the request"}, {"type": "object", "name": "meta", "description": " Any meta-data required to service the request"}], "description": "Returns data and closes the request."}, "setResponseFormatter": {"params": [{"type": "Function", "name": "formatter", "description": " The function to call to format the response object."}], "description": "Sets the response formatter function for all responses.", "guessedname": "setResponseFormatter", "guessedtype": "function"}, "error": {"params": [{"type": "Error", "name": "err", "description": "  A normal JavaScript Error object is expected, but you may add a \"code\" property to the error\nif you want the framework to report a certain HTTP status code for the error. For example, if the status code\nis 404, Mojito will generate a 404 page."}], "description": "Programatically report an error to Mojito, which will handle it gracefully."}, "completeRequest": {"params": [{"type": "Number", "name": "txId", "description": " the id of the request"}, {"type": "String", "name": "method", "description": " the type of callback to call (error, success)"}, {"type": "String", "name": "result", "description": " the result of the request: error, abort, ok"}, {"type": "String", "name": "resultDetail", "description": " the resultDetails as defined in the interfaces (badcookie, badcrumb, etc)"}], "description": "once a request has been finished (either complete or aborted)\nthis method handles the final tasks of firing events, formatting responses\nregistering any modules found, and calling callbacks", "private": ""}, "destroy": {"description": "Called by the bean registry whenever this bean is reinitialized", "guessedname": "destroy", "guessedtype": "function"}, "_processRequest": {"return": {"type": "Number", "description": "the id of the request for tracking"}, "params": [{"type": "Object", "name": "requestObject", "description": " the request Id"}, {"type": "Object", "name": "cb", "description": " callback object"}, {"type": "Number", "name": "id", "description": " the id of the module making the request"}], "description": "Adds the request to the queue for processing", "private": ""}, "createWebServiceResponseObject": {"return": {"type": "Object", "description": "formated response object"}, "params": [{"type": "DaliResponseWs", "name": "response", "description": " the response from the daliProxy"}], "description": "creates a mimic of the yui response object\nfor use in web service calls", "private": ""}, "simulateResponse": {"guessedname": "_simulateResponse", "params": [{"type": "Number", "name": "id", "description": " the id of the transaction"}, {"type": "Object", "name": "details", "description": " the details of the response"}, {"type": "Boolean", "name": "badcookie", "description": " Optional. If true simulate cookies turned off"}], "description": "simulate a server response", "private": "", "guessedtype": "function"}}, "file": "action-context.common.js", "shortname": "ActionContext", "description": "The main point of entry for all mojits into Mojito. The Action Context is\npassed to every mojit action during execution, either on the client or\nserver. This object is the API into Mojito, can can have many plugins\nattached the provide extra functionality."}, "Y.mojito.lib.REST": {"name": "Y.mojito.lib.REST", "namespace": "Y.mojito.lib", "module": "CommonLibs", "guessedname": "REST", "methods": {"HEAD": {"params": [{"type": "String", "name": "url", "description": " RESTful URL to hit"}, {"type": "Object", "name": "params", "description": " parameters to add to the request"}, {"type": "Object", "name": "config", "description": " may contain 'headers' or 'timeout' values"}, {"type": "Function", "name": "callback", "description": " called with response or error"}], "description": "Makes a RESTful HEAD request to specified URL", "guessedname": "HEAD", "guessedtype": "function"}, "GET": {"params": [{"type": "String", "name": "url", "description": " RESTful URL to hit"}, {"type": "Object", "name": "params", "description": " parameters to add to the request"}, {"type": "Object", "name": "config", "description": " may contain 'headers' or 'timeout' values"}, {"type": "Function", "name": "callback", "description": " called with response or error"}], "description": "Makes a RESTful GET request to specified URL", "guessedname": "GET", "guessedtype": "function"}, "_doRequest": {"private": "", "guessedname": "_doRequest", "guessedtype": "function"}, "PUT": {"params": [{"type": "String", "name": "url", "description": " RESTful URL to hit"}, {"type": "Object", "name": "params", "description": " parameters to add to the request"}, {"type": "Object", "name": "config", "description": " may contain 'headers' or 'timeout' values"}, {"type": "Function", "name": "callback", "description": " called with response or error"}], "description": "Makes a RESTful PUT request to specified URL", "guessedname": "PUT", "guessedtype": "function"}, "POST": {"params": [{"type": "String", "name": "url", "description": " RESTful URL to hit"}, {"type": "Object", "name": "params", "description": " parameters to add to the request"}, {"type": "Object", "name": "config", "description": " may contain 'headers' or 'timeout' values"}, {"type": "Function", "name": "callback", "description": " called with response or error"}], "description": "Makes a RESTful POST request to specified URL", "guessedname": "POST", "guessedtype": "function"}, "DELETE": {"params": [{"type": "String", "name": "url", "description": " RESTful URL to hit"}, {"type": "Object", "name": "params", "description": " parameters to add to the request"}, {"type": "Object", "name": "config", "description": " may contain 'headers' or 'timeout' values"}, {"type": "Function", "name": "callback", "description": " called with response or error"}], "description": "Makes a RESTful DELETE request to specified URL", "guessedname": "DELETE", "guessedtype": "function"}}, "static": "", "file": "rest.common.js", "guessedtype": "property", "shortname": "REST", "description": "The Rest module for Mojito provides an easy way to make RESTful calls to URLs\nwithout messing about with Y.io."}, "Http.server": {"name": "Http.server", "namespace": "", "module": "MojitoServer", "methods": {"redirect": {"params": [{"type": "string", "name": "uri", "description": ""}, {"type": "Number", "name": "code", "description": "  [optional] if not specifed, 301"}], "description": "This redirect is an external redirect. It causes an HTTP\nstatus code 301 by default.", "guessedname": "redirect", "guessedtype": "function"}, "getHeader": {"return": {"type": "object", "description": "header value"}, "params": [{"type": "string", "name": "name", "description": "  header name"}], "description": "Returns one request header value", "guessedname": "getHeader", "guessedtype": "function"}, "addHeaders": {"params": [{"type": "object", "name": "hdrs", "description": "  header values to add"}], "description": "Adds a object of headers all at once, adding to previous values", "guessedname": "addHeaders", "guessedtype": "function"}, "getRequest": {"return": {"type": "ServerRequest", "description": "http://nodejs.org/docs/v0.4.7/api/http.html#http.ServerRequest"}, "description": "Returns the HTTP request.", "guessedname": "getRequest", "guessedtype": "function"}, "addHeader": {"params": [{"type": "String", "name": "key", "description": " header name"}, {"type": "String", "name": "val", "description": " header value"}], "description": "Adds a header to the response without overriding previous values", "guessedname": "addHeader", "guessedtype": "function"}, "getHeaders": {"return": {"type": "object", "description": "all headers"}, "description": "Returns all request headers", "guessedname": "getHeaders", "guessedtype": "function"}, "getResponse": {"return": {"type": "ServerResponse", "description": "http://nodejs.org/docs/v0.4.7/api/http.html#http.ServerResponse"}, "guessedname": "getResponse", "guessedtype": "function"}, "isXhr": {"return": {"type": "boolean", "description": ""}, "description": "Helper to tell you if this is an XHR request. Checks specifically\nfor the 'x-requested-with' header.", "guessedname": "isXhr", "guessedtype": "function"}, "setHeaders": {"params": [{"type": "object", "name": "hdrs", "description": "  header values to set"}], "description": "Sets a object full of headers all at once, overriding previous values", "guessedname": "setHeaders", "guessedtype": "function"}, "setHeader": {"params": [{"type": "string", "name": "key", "description": "  header name"}, {"type": "string", "name": "val", "description": "  header value"}], "description": "Sets a header by key, overriding previous values", "guessedname": "setHeader", "guessedtype": "function"}}, "file": "http.server.js", "shortname": "Http.server", "description": "<strong>Access point:</strong> <em>ac.http.*</em>\nThis is a server-only utility plugin that makes many server side\nresources available for mojit code that will never run on the client."}, "MuAdapterClient": {"name": "MuAdapterClient", "namespace": "", "module": "MojitoServer", "methods": {"render": {"params": [{"type": "object", "name": "data", "description": " TODO"}, {"type": "string", "name": "tmpl", "description": " TODO"}, {"type": "object", "name": "adapter", "description": " TODO"}, {"type": "object", "name": "meta", "description": " TODO"}, {"type": "bool", "name": "more", "description": " TODO"}], "description": "TODO DOCS", "guessedname": "render", "guessedtype": "function"}}, "private": "", "file": "mu.client.js", "shortname": "MuAdapterClient", "description": "Class text."}, "Y.mojito.Client": {"name": "Y.mojito.Client", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " The entire configuration object written by the server\nto start up mojito."}], "description": "The starting point for mojito to run in the browser. You can access one instance of the Mojito Client running\nwithin the browser environment through window.YMojito.client."}], "namespace": "Y.mojito", "module": "MojitoClient", "methods": {"executeAction": {"guessedname": "executeAction", "params": [{"type": "Object", "name": "command", "description": " must contain mojit id and action to execute"}, {"type": "Function", "name": "cb", "description": " callback to run when complete"}], "description": "Used for binders to execute their actions through the Mojito framework through their\nproxies.", "private": "", "guessedtype": "function"}, "pause": {"description": "Pause the Mojito Client and all mojits that are running. This will notify all binders that they have been\npaused by calling their onPause() functions. It will prevent the immediate execution of several mojit proxy\noperations that might cause a long process to begin (especially things that might go to the server).\nTo resume, simply call .resume(). This will immediately execute all actions that occurred while Mojito was\npaused.", "guessedname": "pause", "guessedtype": "function"}, "find": {"params": [{"type": "string", "name": "url", "description": "  the URL to find a route for"}, {"type": "string", "name": "verb", "description": "  the HTTP method"}], "description": "Finds a route for a given method+URL", "guessedname": "find", "guessedtype": "function"}, "getComputedRoutes": {"return": {"type": "object", "description": "computed routes"}, "description": "For optimization. Call this to get the computed routes that can be\npassed to the constructor to avoid recomputing the routes.", "guessedname": "getComputedRoutes", "guessedtype": "function"}, "resume": {"resume": "", "description": "Resumes the Mojito client after it has been paused (see method \"pause\"). If there are any queued actions that\nwere executed and cached during the pause, calling resume() will immediately execute them. All binders are\nnotified through their onResume() function that they are been resumed.", "guessedname": "resume", "guessedtype": "function"}}, "file": "mojito-client.client.js", "shortname": "Client", "description": "The starting point for mojito to run in the browser. You can access one instance of the Mojito Client running\nwithin the browser environment through window.YMojito.client."}, "Cookie.server": {"name": "Cookie.server", "namespace": "", "module": "MojitoServer", "methods": {"set": {"params": [{"type": "string", "name": "key", "description": " The key to use"}, {"type": "string", "name": "val", "description": " The value that will be set"}], "description": "Set a cookie on the given key with the given value", "guessedname": "set", "guessedtype": "function"}, "get": {"params": [{"type": "string", "name": "[optional]", "description": " key The key to look for"}], "description": "Returns the cookie for the given key, or all cookies if the key is not specified", "guessedname": "get", "guessedtype": "function"}}, "file": "cookie.server.js", "shortname": "Cookie.server", "description": "<strong>Access point:</strong> <em>ac.cookie.*</em>\nThis server-side cookie add-on allows you to easily use cookies."}, "Y.mojito.lib.MojitoDispatcher": {"name": "Y.mojito.lib.MojitoDispatcher", "constructors": [{"params": [{"type": "ServerStore", "name": "resourceStore", "description": "  the store to use"}], "description": "This object is responsible for running mojits."}], "namespace": "Y.mojito.lib", "module": "CommonLibs", "private": "", "file": "resource-store-adapter.common.js", "shortname": "MojitoDispatcher", "description": "This object is responsible for running mojits."}, "Device.common": {"name": "Device.common", "namespace": "", "module": "ActionContextAddon", "methods": {"get": {"returns": "value", "params": [{"type": "String", "name": "attribute", "description": "  - The name of the catalog attribute e.g \"make\" or \"model\"."}], "description": "Returns the attribute of the catalog for the device\nthis request was intiated from.", "guessedname": "get", "guessedtype": "function"}}, "file": "device.server.js", "shortname": "Device.common", "description": "<strong>Access point:</strong> <em>ac.device.get()</em>\nDevice catalog addon"}, "Params.common": {"name": "Params.common", "namespace": "", "module": "MojitoServer", "methods": {"body": {"return": {"type": "string|object", "description": "param value, or all params if no key specified"}, "params": [{"type": "string", "name": "key", "description": " The name of the parameter required"}], "description": "Alias for 'getFromBody'.", "guessedname": "body", "guessedtype": "function"}, "getFromMerged": {"return": {"type": "string|object", "description": "param value, or all params if no key specified"}, "params": [{"type": "string", "name": "key", "description": " The name of the parameter required"}], "description": "Gets all params merged into one object. Route -> URL -> Body precedence.", "guessedname": "getFromMerged", "guessedtype": "function"}, "all": {"return": {"type": "object", "description": "all params"}, "description": "Alias for 'getAll'.", "guessedname": "all", "guessedtype": "function"}, "getFromBody": {"return": {"type": "string|object", "description": "param value, or all params if no key specified"}, "params": [{"type": "string", "name": "key", "description": " The name of the parameter required"}], "description": "Gets body parameters", "guessedname": "getFromBody", "guessedtype": "function"}, "getFromUrl": {"return": {"type": "string|object", "description": "param value, or all params if no key specified"}, "params": [{"type": "string", "name": "key", "description": " The name of the parameter required"}], "description": "Gets URL parameters", "guessedname": "getFromUrl", "guessedtype": "function"}, "url": {"return": {"type": "string|object", "description": "param value, or all params if no key specified"}, "params": [{"type": "string", "name": "key", "description": " The name of the parameter required"}], "description": "Alias for 'getFromUrl'.", "guessedname": "url", "guessedtype": "function"}, "route": {"return": {"type": "string|object", "description": "param value, or all params if no key specified"}, "params": [{"type": "string", "name": "key", "description": " The name of the parameter required"}], "description": "Alias for 'getFromRoute'.", "guessedname": "route", "guessedtype": "function"}, "getAll": {"return": {"type": "object", "description": "all params"}, "description": "Gets all params, keyed by 'route', 'url', 'body', and 'file'.", "guessedname": "getAll", "guessedtype": "function"}, "getFromFiles": {"return": {"type": "string|object", "description": "param value, or all params if no key specified"}, "description": "Gets file parameters", "private": "", "params": [{"type": "string", "name": "key", "description": " The name of the parameter required"}], "guessedname": "getFromFiles", "guessedtype": "function"}, "getFromRoute": {"return": {"type": "string|object", "description": "param value, or all params if no key specified"}, "params": [{"type": "string", "name": "key", "description": " The name of the parameter"}], "description": "Gets route parameters", "guessedname": "getFromRoute", "guessedtype": "function"}, "files": {"return": {"type": "string|object", "description": "param value, or all params if no key specified"}, "params": [{"type": "string", "name": "key", "description": " The name of the parameter required"}], "description": "Alias for 'getFromFiles'.", "guessedname": "files", "guessedtype": "function"}, "merged": {"return": {"type": "string|object", "description": "param value, or all params if no key specified"}, "params": [{"type": "string", "name": "key", "description": " The name of the parameter required"}], "description": "Alias for 'getFromMerged'.", "guessedname": "merged", "guessedtype": "function"}}, "file": "params.common.js", "shortname": "Params.common", "description": "<strong>Access point:</strong> <em>ac.params.*</em>\nAddon that provides access to any parameters given to the system"}, "Y.mojito.Y.Transport": {"shortname": "Y.Transport", "namespace": "Y.mojito", "name": "Y.mojito.Y.Transport", "methods": {"getName": {"return": {"type": "String", "description": "name of the registered bean, or undefined if it is not a registered bean"}, "description": "Given an instance of a bean, returns the String name", "guessedname": "getName", "guessedtype": "function"}, "wsRequestFormatter": {"guessedname": "_wsRequestFormatter", "return": {"type": "Object", "description": "the formatted request"}, "description": "Format web service requests \nusing var foo = function() format\nso that reset is easier.", "private": "", "guessedtype": "function"}, "getBean": {"return": {"type": "Object", "description": "the bean instance, or undefined if it is not registered"}, "description": "If the bean system has not been instatiated yet, this will instantiate all beans! Then one bean \ninstance is returned by name.", "guessedname": "getBean", "guessedtype": "function"}, "registerBean": {"params": [{"type": "String", "name": "name", "description": "  Required identifier of this bean"}, {"type": "Object", "name": "bean", "description": "  Either a constructor Function or an instance object of a bean"}], "description": "Called to register a bean or bean constructor with the bean registry. If this method is called\ntwice with the same bean, the last bean wins. Only one type of bean can be in the system at a\ntime.", "guessedname": "registerBean", "guessedtype": "function"}, "getBeans": {"return": {"type": "Object", "description": "contains all beans, each bean is accessible by bean name"}, "description": "If the bean system has not been instatiated yet, this will instantiate all beans!", "guessedname": "getBeans", "guessedtype": "function"}}}, "Composite.common": {"name": "Composite.common", "namespace": "", "module": "MojitoServer", "methods": {"execute": {"params": [{"type": "object", "name": "cfg", "description": " The configuration object to be used"}, {"type": "function", "name": "cb", "description": " The callback that will be called"}], "description": "This method requires an explicit config object and returns\na RMP compliant object via a callback.\n<pre>\ncfg = {\nchildren: {\nslot-1: {\ntype: \"default\",\naction: \"index\"\n},\nslot-2: {\ntype: \"default\",\naction: \"index\",\nparams: {\nroute: {},\nurl: {},\nbody: {},\nfile: {}\n}\n}\n},\nassets: {}\n}\n</pre>\nThe \"callback\" is an object containg the child slots with its\nrendered data.\n<pre>\ncallback({\nslot-1: <string>,\nslot-2: <string>\n},\n{\nhttp: {}\nassets: {}\n})\n</pre>", "guessedname": "execute", "guessedtype": "function"}, "done": {"params": [{"type": "object", "name": "opts", "description": " The configuration object to be used. <em>template<em> can be used to provide additional\nview template values."}], "description": "Automatically dispatches all the children of this mojit and collects their executed values into the view\ntemplate, keyed by the child's name within the mojit's configuration. For example, given the mojit spec:\n<pre>\n\"specs\": {\n\"parent\": {\n\"type\": \"MyCompositeMojit\",\n\"config\": {\n\"children\": {\n\"foo\": {\n\"type\": \"FooMojit\"\n},\n\"bar\": {\n\"type\": \"BarMojit\"\n}\n}\n}\n}\n}\n</pre>\nAnd given the view template:\n<pre>\n&lt;div id=&quot;{{mojit_uuid}}&quot;&gt;\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;div class=&quot;fooslot&quot;&gt;\n{{{foo}}}\n&lt;/div&gt;\n&lt;div class=&quot;barslot&quot;&gt;\n{{{bar}}}\n&lt;/div&gt;\n&lt;/div&gt;\n</pre>\nAnd the controller:\n<pre>\nY.mojito.controller = {\nindex: function(ac) {\nac.composite.done({\ntemplate: { title: 'Hello there' } // for the view only\n});\n}\n};\n</pre>\nThis will execute the child intances of the \"FooMojit\" and \"BarMojit\", returning their rendered values into\nthe parent's view template, thus rendering the full parent view including the children.\nAll the parent parameters are passed along to children.", "guessedname": "done", "guessedtype": "function"}}, "file": "composite.common.js", "shortname": "Composite.common", "description": "<strong>Access point:</strong> <em>ac.composite.*</em>\nProvides methods for working with many Mojits."}, "Config.common": {"name": "Config.common", "namespace": "", "module": "MojitoServer", "methods": {"getDefinition": {"return": {"type": "Object|Array|String", "description": ""}, "params": [{"type": "String", "name": "key", "description": " A period separated key path to look for i.e. \"get.my.value\""}, {"type": "Object|Array|String", "name": "def", "description": " The default value to use if no match was found"}], "description": "Access definition values.", "guessedname": "getDefinition", "guessedtype": "function"}, "get": {"return": {"type": "Object|Array|String", "description": ""}, "params": [{"type": "String", "name": "key", "description": " A period separated key path to look for i.e. \"get.my.value\""}, {"type": "Object|Array|String", "name": "def", "description": " The default value to use if no match was found"}], "description": "Access config values.", "guessedname": "get", "guessedtype": "function"}}, "file": "config.common.js", "shortname": "Config.common", "description": "<strong>Access point:</strong> <em>ac.config.*</em>\nProvides access to the Mojits configuration"}, "Assets.common": {"name": "Assets.common", "namespace": "", "module": "ActionContextAddon", "methods": {"addBlob": {"params": [{"type": "string", "name": "content", "description": " A string of data"}, {"type": "string", "name": "location", "description": " Either \"top\" or \"bottom\""}], "description": "Method for adding a Blob of data to the page. This can be used\nfor adding custom \"script\" or \"style\" blocks.", "guessedname": "addBlob", "guessedtype": "function"}, "addCss": {"params": [{"type": "string", "name": "link", "description": " A URL (./local.css converts to /static/mojit_type/assets/local.css)"}, {"type": "string", "name": "location", "description": " Either \"top\" or \"bottom\""}], "description": "Method for adding a JS file to the page.", "guessedname": "addCss", "guessedtype": "function"}, "addJs": {"params": [{"type": "string", "name": "link", "description": " A URL (./local.css converts to /static/mojit_type/assets/local.css)"}, {"type": "string", "name": "location", "description": " Either \"top\" or \"bottom\""}], "description": "Method for adding a JS file to the page.", "guessedname": "addJs", "guessedtype": "function"}}, "file": "assets.common.js", "shortname": "Assets.common", "description": "<strong>Access point:</strong> <em>ac.assets.*</em>\nProvides methods for adding HTML assets to a page."}, "Carrier.common": {"name": "Carrier.common", "namespace": "", "module": "ActionContextAddon", "methods": {"get": {"returns": "value", "params": [{"type": "String", "name": "attribute", "description": "  - The name of the catalog attribute e.g \"ticker\"."}], "description": "Returns the attribute of the catalog for the current carrier used for\nthis request.", "guessedname": "get", "guessedtype": "function"}}, "file": "carrier.server.js", "shortname": "Carrier.common", "description": "<strong>Access point:</strong> <em>ac.carrier.get()</em>\nCarrier catalog addon"}, 

"Analytics.common": {"name": "Analytics.common", "namespace": "", "module": "ActionContextAddon", "methods": {"retrieve": {"params": [{"type": "function", "name": "cb", "description": " callback will be called with the analytics object"}, {"type": "object", "name": "[optional]", "description": " scope scope of the callback"}], "description": "To retrieve analytics data that has been stored by child mojits, call\nthis function and provide a function, which will be called once the children\nhave been dispatched and all their analytics data has been merged.", "guessedname": "retrieve", "guessedtype": "function"}, "setMergeFunction": {"params": [{"type": "function", "name": "fn", "description": " user-defined merge function, which should accept\ntwo objects, the first is \"to\", and the second is \"from\". this function\nshould return the merged object."}], "description": "Allows a way for addons mixed in after this one to set an alternate\ndata merge function when analytics from multiple children are combined.\nThe default merge function is the same one used internally by Mojito\nto merge meta data, and will be sufficient for most use cases.", "guessedname": "setMergeFunction", "guessedtype": "function"}, "store": {"params": [{"type": "object", "name": "val", "description": " should be an object bag full of whatever you wish"}], "description": "Store an analytic value. This function can be called multiple times\nwithin a mojit, and uses a merging function to combine objects.", "guessedname": "store", "guessedtype": "function"}}, "file": "analytics.common.js", "shortname": "Analytics.common", "description": "<strong>Access point:</strong> <em>ac.analytics.*</em>\nProvides an easy way to stash analytics information within child mojits\nand retrieve them within parent after the children have been executed.\nData handled by this addon, however, cannot be used to augment the\nnormal data flow. IE: you cannot retrieve analytics data and then call\nac.done()."}, "ServerStore": {"name": "ServerStore", "constructors": [{"params": [{"type": "", "name": "root", "description": ""}], "description": "A \"resource\" is the smallest-sized component in the mojito framework.\nIt has a representation on disk.\nSometimes a resource will be fully represented by a single file.\nSometimes multiple files together will comprise one resource.\nSometimes multiple resources will be defined in one file.\nIt is the job of the resource store to manage all this. \nRESOURCE TYPES\nconfig      -- a piece of configuration, sometimes for another resource \ncontroller  -- the controller for a mojit\nmodel       -- a model for a mojit\nview        -- a view for a mojit\nbinder      -- a binder for a mojit\naction      -- an action to augment the controller\nasset       -- an asset (css, js, image, etc)\naddon       -- an addon to the mojito system\nyui-lang    -- a YUI3 language bundle\nyui-module  -- a YUI3 module (that isn't one of the above)\nRESOURCE METADATA\n(not all resources will have all details)\n(not all combinations of type:source are valid)\n- id\ncontext-insensitive ID of the resource\n(type + 'app' + (details specific to type))\n(type + 'mojit' + mojit-type + (details specific to type))\n- type\nsee above\n- source\n`fw`, `app` or `mojit`\nwhere the resource is defined\n- fsPath\nthe path on the filesystem\n- staticHandlerURL\nfor resources that can be deployed by reference to the client\nthe URL that will cause the asset handler to serve the resource\n- name\nspecific to type\n- configType\nfor type=config\nthe type of the configuration\n- viewEngine\nfor type=view\n`mu`, `dust`, etc\n- viewOutputFormat\nfor type=view\noutput format that the view will generate\n`xml`, `html`, etc\n- assetType\nfor type=asset\n`css`, `js`, `png`, `swf`, etc\n- addonType\nfor type=addon\nthe mojito subsystem to which the addon should be added\n- yuiModuleName\nfor any resource delivered as a YUI3 module\nthe YUI3 module name\n- yuiModuleVersion\nfor any resource delivered as a YUI3 module\nthe YUI3 module version\n- yuiModuleMeta\nfor any resource delivered as a YUI3 module\nthe YUI3 module metadata\n(requires, langs, etc)\n- yuiSortedPaths\nfor any resource delivered as a YUI3 module\na list of YUI modules required by the module,\nwith transitive dependencies resolved\nformat:  { yui-module-name: URL-to-load-yui-module }"}], "namespace": "", "private": "", "guessedname": "libfs", "methods": {"preload": {"return": {"type": "undefined", "description": ""}, "description": "Preloads everything in the app, and as well pertinent parts of\nthe framework.", "appconfig": "overrides for the app config", "guessedname": "preload", "guessedtype": "function", "applicationenvironment": "??"}, "expandInstanceForEnv": {"return": {"type": "", "description": "nothing. results passed back via the callback"}, "params": [{"type": "\"client\"|\"server\"", "name": "env", "description": "  which environment to expand the instance for"}, {"type": "map", "name": "instance", "description": "  partial instance to expand"}, {"type": "object", "name": "ctx", "description": "  the request context"}, {"type": "function(err,instance)", "name": "cb", "description": "  the callback to send the results to"}], "description": "This method takes a partial instance and expands it to all details needed to run the mojit.\nOnly a `base` or `type` fields are required.  You should only specify one.\n<pre>\ninstance: {\nbase: \"\",\n// specifies a \"base\" instance which this instance will extend\n// the value refers to a key of `specs` found in `application.json`\ntype: \"\",\n// specifies the mojit type\naction: \"\",\n// specifies a default action if the instance isn't dispatched with a specific one\nconfig: {...},\n// the config for the mojit\n// this will be augmented (appropriately) with the mojit type defaults\n// found in the type's `defaults.json`\nappConfig: {...},\n// the application config (appropriate for the context)\nassetRoot: \"\",\n// path to directory containing assets\n// the path will be a URL if `env` is `client` otherwise it's a filesystem path\ndefinition: \"\",\n// the body of the `defintion.json` for the mojit type\ndefaults: \"\",\n// the body of the `defaults.json` for the mojit type\nyui: {\n// details for generating a YUI sandbox for this instance\nconfig: {\n// configuration details for the YUI.GlobalConfig.groups (or an equivalent).\n// the module paths are given as `fullpath` and contain either a URL if `env'\n// is `client` or a filesystem path if `env` is `server`\n},\nrequires: []\n// list of YUI modules that this instance requires\n},\nactions: [],\n// list of paths to the YUI modules containing actions\ncontroller: \"\",\n// path to controller\n// the path will be a URL if `env` is `client` otherwise it's a filesystem path\nlang:\n// path to YUI module of the language bundle\n// the path will be a URL if `env` is `client` otherwise it's a filesystem path\nmodels: {},\n// list of models used by the mojit type\n// the key is the model name, and the value is the path to the model file\n// the path will be a URL if `env` is `client` otherwise it's a filesystem path\nviews: {\n// list of views in the mojit type\n// the key is the view name, and the value is details about the view\nview-name: {\n\"content-path\": \"\",\n// the path to use to load the body of the view\n// the path will be a URL if `env` is `client` otherwise it's a filesystem path\n\"engine\": \"\",\n// which engine is used to render the view\n\"binder-path\": \"\",\n// the path to the binder\n// the path will be a URL if `env` is `client` otherwise it's a filesystem path\n\"binder-module\": \"\"\n// the YUI module name of the binder\n}\n}\n}\n</pre>", "guessedname": "expandInstanceForEnv", "guessedtype": "function"}, "getAppConfig": {"return": {"type": "object", "description": "config object"}, "params": [{"type": "object", "name": "context", "description": "  context under which to load the config"}, {"type": "string", "name": "name", "description": "  type of config to read:\n- definition:  reads ./application.json\n- package:  reads ./package.json\n- routes:  reads ./routes.json (or whatever was configured in appConfig('definition').routesFiles)"}], "description": "gets application configuration", "guessedname": "getAppConfig", "guessedtype": "function"}, "getRoutes": {"return": {"type": "object", "description": "routes"}, "params": [{"type": "object", "name": "ctx", "description": "  context under which to load the routes"}], "description": "Returns the routes configured in the application.", "guessedname": "getRoutes", "guessedtype": "function"}, "expandInstance": {"return": {"type": "", "description": "nothing. results passed back via the callback"}, "params": [{"type": "map", "name": "instance", "description": "  partial instance to expand"}, {"type": "object", "name": "ctx", "description": "  the request context"}, {"type": "function(err,instance)", "name": "cb", "description": "  the callback to send the results to"}], "description": "This just calls expandInstanceForEnv() with `env` set to `server`.", "guessedname": "expandInstance", "guessedtype": "function"}}, "module": "MojitoServer", "file": "store.server.js", "guessedtype": "property", "shortname": "ServerStore", "description": "A \"resource\" is the smallest-sized component in the mojito framework.\nIt has a representation on disk.\nSometimes a resource will be fully represented by a single file.\nSometimes multiple files together will comprise one resource.\nSometimes multiple resources will be defined in one file.\nIt is the job of the resource store to manage all this. \nRESOURCE TYPES\nconfig      -- a piece of configuration, sometimes for another resource \ncontroller  -- the controller for a mojit\nmodel       -- a model for a mojit\nview        -- a view for a mojit\nbinder      -- a binder for a mojit\naction      -- an action to augment the controller\nasset       -- an asset (css, js, image, etc)\naddon       -- an addon to the mojito system\nyui-lang    -- a YUI3 language bundle\nyui-module  -- a YUI3 module (that isn't one of the above)\nRESOURCE METADATA\n(not all resources will have all details)\n(not all combinations of type:source are valid)\n- id\ncontext-insensitive ID of the resource\n(type + 'app' + (details specific to type))\n(type + 'mojit' + mojit-type + (details specific to type))\n- type\nsee above\n- source\n`fw`, `app` or `mojit`\nwhere the resource is defined\n- fsPath\nthe path on the filesystem\n- staticHandlerURL\nfor resources that can be deployed by reference to the client\nthe URL that will cause the asset handler to serve the resource\n- name\nspecific to type\n- configType\nfor type=config\nthe type of the configuration\n- viewEngine\nfor type=view\n`mu`, `dust`, etc\n- viewOutputFormat\nfor type=view\noutput format that the view will generate\n`xml`, `html`, etc\n- assetType\nfor type=asset\n`css`, `js`, `png`, `swf`, etc\n- addonType\nfor type=addon\nthe mojito subsystem to which the addon should be added\n- yuiModuleName\nfor any resource delivered as a YUI3 module\nthe YUI3 module name\n- yuiModuleVersion\nfor any resource delivered as a YUI3 module\nthe YUI3 module version\n- yuiModuleMeta\nfor any resource delivered as a YUI3 module\nthe YUI3 module metadata\n(requires, langs, etc)\n- yuiSortedPaths\nfor any resource delivered as a YUI3 module\na list of YUI modules required by the module,\nwith transitive dependencies resolved\nformat:  { yui-module-name: URL-to-load-yui-module }"}, "MuAdapterServer": {"name": "MuAdapterServer", "namespace": "", "module": "MojitoServer", "methods": {"render": {"params": [{"type": "object", "name": "data", "description": " TODO"}, {"type": "string", "name": "mojitType", "description": " TODO"}, {"type": "string", "name": "tmpl", "description": " TODO"}, {"type": "object", "name": "adapter", "description": " TODO"}, {"type": "object", "name": "meta", "description": " TODO"}, {"type": "bool", "name": "more", "description": " TODO"}], "description": "TODO DOCS", "guessedname": "render", "guessedtype": "function"}}, "private": "", "file": "mu.server.js", "shortname": "MuAdapterServer", "description": "Class text."}}, "version": "0.1.0", "namespaces": ["Y.mojito.lib", "Y.mojito"]}
